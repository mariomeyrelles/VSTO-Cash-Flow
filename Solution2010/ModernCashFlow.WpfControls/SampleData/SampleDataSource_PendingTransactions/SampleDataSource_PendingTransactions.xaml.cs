//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource_PendingTransactions
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource_PendingTransactions { }
#else

	public class SampleDataSource_PendingTransactions : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleDataSource_PendingTransactions()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/ModernCashFlow.WpfControls;component/SampleData/SampleDataSource_PendingTransactions/SampleDataSource_PendingTransactions.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private TodayPayments _TodayPayments = new TodayPayments();

		public TodayPayments TodayPayments
		{
			get
			{
				return this._TodayPayments;
			}
		}
	}

	public class TodayPayments : System.Collections.ObjectModel.ObservableCollection<TodayPaymentsItem>
	{ 
	}

	public class TodayPaymentsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Transaction _Transaction = new Transaction();

		public Transaction Transaction
		{
			get
			{
				return this._Transaction;
			}

			set
			{
				if (this._Transaction != value)
				{
					this._Transaction = value;
					this.OnPropertyChanged("Transaction");
				}
			}
		}
	}

	public class Transaction : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private double _AbsoluteValue = 0;

		public double AbsoluteValue
		{
			get
			{
				return this._AbsoluteValue;
			}

			set
			{
				if (this._AbsoluteValue != value)
				{
					this._AbsoluteValue = value;
					this.OnPropertyChanged("AbsoluteValue");
				}
			}
		}

		private string _Date = string.Empty;

		public string Date
		{
			get
			{
				return this._Date;
			}

			set
			{
				if (this._Date != value)
				{
					this._Date = value;
					this.OnPropertyChanged("Date");
				}
			}
		}

		private string _TransactionStatusDescription = string.Empty;

		public string TransactionStatusDescription
		{
			get
			{
				return this._TransactionStatusDescription;
			}

			set
			{
				if (this._TransactionStatusDescription != value)
				{
					this._TransactionStatusDescription = value;
					this.OnPropertyChanged("TransactionStatusDescription");
				}
			}
		}
	}
#endif
}
